// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                     Int                     @id @default(autoincrement())
  clerkId                String                  @unique
  username               String?
  name                   String?
  email                  String?                 @unique
  workouts               Workout[]               @relation("AuthoredWorkouts")
  favorites              Workout[]               @relation("FavoritedWorkouts")
  scheduledWorkouts      ScheduledWorkout[]
  userPerformanceMetrics UserPerformanceMetric[]
  userRacePRs            UserRacePR[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  WorkoutSchedule        WorkoutSchedule[]
}

enum Discipline {
  RUN
  BIKE
  SWIM
  TRIATHLON
}

model PerformanceMetricType {
  id        Int                     @id @default(autoincrement())
  name      String                  @unique
  unit      String?
  metrics   UserPerformanceMetric[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model UserPerformanceMetric {
  id                    Int                   @id @default(autoincrement())
  user                  User                  @relation(fields: [userId], references: [id])
  userId                Int
  performanceMetricType PerformanceMetricType @relation(fields: [metricTypeId], references: [id])
  metricTypeId          Int
  value                 Float
  dateAchieved          DateTime
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model RaceType {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  distance   Float // in meters
  discipline Discipline
  prRecords  UserRacePR[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model UserRacePR {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  raceType     RaceType @relation(fields: [raceTypeId], references: [id])
  raceTypeId   Int
  time         Float // duration in seconds
  dateAchieved DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ScheduledWorkout {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  workout     Workout  @relation(fields: [workoutId], references: [id])
  workoutId   Int
  scheduledAt DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  week        Week?    @relation(fields: [weekId], references: [id])
  weekId      Int?
}

model Workout {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  type              WorkoutType
  items             WorkoutItem[]      @relation("WorkoutToWorkoutItem")
  author            User               @relation("AuthoredWorkouts", fields: [authorId], references: [id])
  authorId          Int
  favoritedBy       User?              @relation("FavoritedWorkouts", fields: [userId], references: [id])
  userId            Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  scheduledWorkouts ScheduledWorkout[]
}

model WorkoutItem {
  id          Int          @id @default(autoincrement())
  workout     Workout      @relation("WorkoutToWorkoutItem", fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId   Int
  order       Int
  interval    Interval?
  repeatGroup RepeatGroup?
}

model Interval {
  id            Int           @id @default(autoincrement())
  type          IntervalType
  durationType  DurationType
  durationValue Float
  durationUnit  DurationUnit
  intensityType IntensityType
  intensityMin  String?
  intensityMax  String?
  workoutItem   WorkoutItem?  @relation(fields: [workoutItemId], references: [id], onDelete: Cascade)
  workoutItemId Int?          @unique
  repeatGroup   RepeatGroup?  @relation(fields: [repeatGroupId], references: [id], onDelete: Cascade)
  repeatGroupId Int?
}

model RepeatGroup {
  id            Int         @id @default(autoincrement())
  repeats       Int
  intervals     Interval[]
  workoutItem   WorkoutItem @relation(fields: [workoutItemId], references: [id], onDelete: Cascade)
  workoutItemId Int         @unique
}

// WORKOUT SKELETON
model WorkoutSchedule {
  id                 Int         @id @default(autoincrement())
  startDate          DateTime
  raceDate           DateTime
  raceName           String
  raceType           WorkoutType
  raceDistance       String?
  customDistance     String?
  customDistanceUnit String?
  restDay            String?
  experienceLevel    String?
  goalTimeHours      String?
  goalTimeMinutes    String?
  goalTimeSeconds    String?
  additionalNotes    String?
  scheduleTitle      String
  description        String
  user               User        @relation(fields: [userId], references: [id])
  userId             Int
  phases             Phase[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Phase {
  id                Int             @id @default(autoincrement())
  name              String
  startDate         DateTime
  endDate           DateTime
  objective         PhaseObjective
  workoutScheduleId Int // Add this line
  workoutSchedule   WorkoutSchedule @relation(fields: [workoutScheduleId], references: [id])
  weeks             Week[]
}

model Week {
  id                Int                @id @default(autoincrement())
  weekNumber        Int
  startDate         DateTime
  endDate           DateTime
  focus             WeekFocus
  description       String
  volumeDistance    Json // For storing {value: number, unit: string}
  volumeDuration    Json // For storing {minutes: number}
  Phase             Phase?             @relation(fields: [phaseId], references: [id])
  phaseId           Int?
  scheduledWorkouts ScheduledWorkout[]
}

enum WorkoutType {
  RUN
  BIKE
  SWIM
  TRIATHLON
}

enum IntervalType {
  WARMUP
  COOLDOWN
  ACTIVE
  REST
}

enum DurationType {
  TIME
  DISTANCE
  HEART_RATE
  CALORIES
}

enum DurationUnit {
  SECONDS
  MINUTES
  HOURS
  METERS
  KILOMETERS
  MILES
  BPM
  CALORIES
}

enum IntensityType {
  NONE
  CADENCE
  HEART_RATE
  POWER
  PACE_MILE
  PACE_KM
  PACE_400M
}

enum PhaseObjective {
  BASE
  BUILD
  PEAK
  TAPER
}

enum WeekFocus {
  ENDURANCE
  THRESHOLD
  SPEED
  RECOVERY
  BASE
}
